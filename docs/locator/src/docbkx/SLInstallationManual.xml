<?xml version="1.0" encoding="utf-8"?>
<!--
  #%L
  Locator :: Manual
  %%
  Copyright (C) 2011 Talend Inc.
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:ns5="http://www.w3.org/1998/Math/MathML"
      xmlns:ns4="http://www.w3.org/2000/svg"
      xmlns:ns3="http://www.w3.org/1999/xhtml"
      xmlns:ns="http://docbook.org/ns/docbook">
  <info>
    <title>Talend ESB Service Locator</title>

    <subtitle>Installation Manual</subtitle>

    <pubdate>1 March 2011</pubdate>

    <author>
      <last>Talend ESB Runtime Team</last>
    </author>

    <copyright>
      <year>2011</year>

      <holder>Talend Corporation</holder>
    </copyright>
  </info>

  <chapter>
    <title>Service Locator Installation</title>

    <para>The Service Locator is a service that provides service consumers
    with a mechanism to discover service endpoints at run time. The Service
    Locator consists of two parts: The Endpoint Repository and the
    ServiceLocator Feature. This chapter describes the steps to install and
    run the <emphasis role="strong">Service Locator</emphasis>.</para>

    <para>Since creating a distributed, fault-tolerant endpoint repository is
    a non-trivial task, the Service Locator implementation based on proven
    open source technology - Apache ZooKeeper. This is a highly reliable
    service that provides coordination between distributed processes.</para>

    <para>To learn more about Apache ZooKeeper, visit <link
    xlink:href="http://zookeeper.apache.org/">http://zookeeper.apache.org/</link>.</para>

    <section>
      <title>Download</title>

      <para>To get a server distribution, download a recent <link
      xlink:href="http://zookeeper.apache.org/releases.html">stable</link>
      release from one of the Apache Download Mirrors. After this unpack it
      and cd to the root.</para>
    </section>

    <section>
      <title>Standalone Operation</title>

      <para>Setting up the Service Locator server in standalone mode is
      straightforward. The server is contained in a single JAR file, so
      installation consists of creating a configuration. Once you've
      downloaded a stable Service Locator server release unpack it and
      navigate to its root directory. To start the Service Locator you need a
      configuration file. Here is a sample, create it in <emphasis
      role="strong">conf/zoo.cfg</emphasis>:</para>

      <example xml:id="ex.slstaloneconf">
        <title>Service Locator standalone configuration</title>

        <programlisting>
tickTime=2000 
dataDir=/var/locator 
clientPort=2181
					</programlisting>
      </example>

      <para>This file can be named as you wish, but for the sake of this
      discussion call it <emphasis role="strong">conf/zoo.cfg</emphasis>.
      Change the value of dataDir to specify an existing (empty to start with)
      directory. Here are the meanings for each of the fields: <informaltable>
          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry><para>Field name</para></entry>

                <entry><para>Description</para></entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>tickTime</code></entry>

                <entry>the basic time unit in milliseconds used by Service
                Locator. It is used to do heartbeats and the minimum session
                timeout will be twice the <code>tickTime</code></entry>
              </row>

              <row>
                <entry><code>dataDir</code></entry>

                <entry>the location to store the in-memory database snapshots
                and, unless specified otherwise, the transaction log of
                updates to the database</entry>
              </row>

              <row>
                <entry><code>clientPort</code></entry>

                <entry>the port to listen for client connections</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>

    <section>
      <title>Start using command line</title>

      <para>Now that you created the configuration file, you can start Service
      Locator server, bin directory contain scripts that allow easy access
      (classpath in particular) to the Service Locator server and command line
      client:</para>

      <programlisting>
bin/zkServer.sh start
bin/zkServer.sh start configFilename (if configFilename != <emphasis
          role="strong">zoo.cfg)</emphasis>
    				</programlisting>

      <para>Files ending in <code>.sh</code> are unix and cygwin compatible.
      Files ending in <code>.cmd</code> are msdos/windows compatible. The
      Service Locator server logs messages using log4j. You will see log
      messages logged at the console (default) and/or a log file depending on
      the log4j configuration. The steps outlined here run the Service Locator
      in standalone mode. There is no replication, so if the Service Locator
      process fails, the service will go down.</para>
    </section>

    <section>
      <title>Running a Replicated Service Locator</title>

      <para>Running the Service Locator server in standalone mode is
      convenient for evaluation, development, and testing. But in production,
      you should run the Service Locator in replicated mode. A replicated
      group of servers in the same application is called a quorum, and in
      replicated mode, all servers in the quorum have copies of the same
      configuration file. The configuration is similar to the one used in
      standalone mode, but with a few differences:</para>

      <example xml:id="ex.slreplconf">
        <title>Replicated Service Locator configuration</title>

        <programlisting>
tickTime=2000
dataDir=/var/locator
clientPort=2181
initLimit=5
syncLimit=2
server.1=locator_host1:2888:3888
server.2=locator_host2:2888:3888
server.3=locator_host3:2888:3888
    				</programlisting>
      </example>

      <para>The new configuration entry, <code>initLimit</code> limits the
      time the Service Locator servers in quorum have to connect to a leader.
      The configuration entry syncLimit limits how far out of date a server
      can be from a leader. For both of these timeouts the unit of time is
      specified using <code>tickTime</code>.</para>

      <para>In this example, the timeout for <code>initLimit</code> is 5 ticks
      at 2000 milleseconds a tick, or 10 seconds. The entries of the form
      <code>server.X</code> list the servers that make up the Service Locator
      service. When the server starts up, it knows which server it is by
      looking for the file <emphasis role="strong">myid</emphasis> in the data
      directory. That file has the contains the server number, in ASCII.
      Finally, note the two port numbers after each server name:
      <code>"2888"</code> and <code>"3888"</code>. Peers use the former port
      to connect to other peers. Such a connection is necessary so that peers
      can communicate, for example, to agree upon the order of updates. More
      specifically, a Service Locator server uses this port to connect
      followers to the leader. When a new leader arises, a follower opens a
      TCP connection to the leader using this port. Because the default leader
      election also uses TCP, we currently require another port for leader
      election. This is the second port in the server entry.</para>
    </section>

    <section>
      <title>Maintaining a Service Locator</title>

      <para>The Service Locator continually saves znode snapshot files and,
      optionally, transactional logs in a Data Directory to enable you to
      recover data. It's a good idea to back up the Service Locator Data
      Directory periodically. Although Service Locator is highly reliable
      because a persistent copy is replicated on each server, recovering from
      backups may be necessary if a catastrophic failure or user error
      occurs.</para>

      <para>The Service Locator server does not remove the snapshots and log
      files, so they will accumulate over time. You will need to cleanup this
      directory occasionally, based on your backup schedules and processes. To
      automate the cleanup, a <code>zkCleanup.sh</code> script is provided in
      the bin directory. Modify this script as necessary for your situation.
      In general, you want to run this as a cron task based on your backup
      schedule.</para>

      <para>The data directory is specified by the dataDir parameter in the
      Service Locator server <link
      xlink:href="http://zookeeper.apache.org/doc/trunk/zookeeperAdmin.html#sc_configuration">configuration
      file</link>, and the data log directory is specified by the dataLogDir
      parameter. For more information, see <link
      xlink:href="http://zookeeper.apache.org/doc/trunk/zookeeperAdmin.html#Ongoing+Data+Directory+Cleanup">Ongoing
      Data Directory Cleanup</link>.</para>
    </section>
  </chapter>

  <chapter>
    <title>Enabling ServiceLocator usage in CXF</title>

    <para>You need the client component of the Service Locator
    (locator-4.0.jar) to enable your CFX service or consumer to use the
    Service Locator.</para>

    <para>To use the Locator client in CXF you need to add the
    <code>locator-4.0.jar</code> into your classpath or war file. Also add it
    to the OSGi conatiner if uses one. To learn more about Locator client
    configuration for both provider or consumer please see the Service Locator
    Configuration Manual</para>
  </chapter>
</book>
