<?xml version="1.0" encoding="utf-8"?>
<!--
  #%L
  Locator :: Manual
  %%
  Copyright (C) 2011 Talend Inc.
  %%
	This documentation is provided under the terms of the Creative Commons Public License (CCPL).
	For more information about what you can and cannot do with this documentation in accordance with the
	CCPL, please read: http://creativecommons.org/licenses/by-nc-sa/2.0/
  #L%
  -->


<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:ns5="http://www.w3.org/1998/Math/MathML"
      xmlns:ns4="http://www.w3.org/2000/svg"
      xmlns:ns3="http://www.w3.org/1999/xhtml"
      xmlns:ns="http://docbook.org/ns/docbook">
  <info>
    <title>Talend ESB Service Locator</title>

    <subtitle>Configuration Manual</subtitle>
         <subtitle>Covers 4.0.x</subtitle>
        <pubdate>26 April 2011</pubdate>

    <author>
      <orgname>Talend Corporation</orgname>
    </author>

    <copyright>
      <year>2011</year>
      <holder>Talend Corporation</holder>
    </copyright>
    <legalnotice>
        <title>Copyleft</title>
        <para>
			This documentation is provided under the terms of the Creative Commons Public License (CCPL).
			For more information about what you can and cannot do with this documentation in accordance with the
			CCPL, please read: http://creativecommons.org/licenses/by-nc-sa/2.0/
        </para>
    </legalnotice>
    <legalnotice>
        <title>Notices</title>
        <para>
            Talend, Talend Integration Factory, and Talend Service Factory are trademarks of Talend, Inc.
        </para>
        <para>
            Apache CXF, CXF, Apache Karaf, Karaf, Apache Camel, Camel, Apache Maven, and Maven are trademarks of The Apache Foundation.
        </para>
        <para>
            Eclipse Equinox is a trademark of the Eclipse Foundation.
        </para>
        <para>
            All other brands, product names, company names, trademarks and service marks are the properties of their respective owners.
        </para>
    </legalnotice>
  </info>

  <chapter>
    <title>Introduction</title>

    <para>The Service Locator is a service that provides its consumers with a
    mechanism to discover service endpoints at run time. The Service Locator
    consists of two parts: an Endpoint repository and a CXF feature used to
    configure the use of the Service Locator at provider and consumer side.
    Like any standard CXF feature, the ServiceLocator Feature is configured
    separately for the service provider side and service consumer side. The
    provider side Locator Feature extension registers and deregisters service
    endpoints in the endpoint repository when the provider becomes available
    or unavailable. The consumer side Locator Feature extension transparently
    retrieves service endpoint addresses from the endpoint repository when a
    service call to a provider is to be made.</para>

    <para>The configuration manual describes in detail the Service Locator
    Feature Spring configuration.</para>
  </chapter>

  <chapter>
    <title>Provider side configuration</title>

    <section>
      <title>Spring configuration</title>

      <para>To add the Locator feature to a CXF service provider, use
      <code>&lt;jaxws:features&gt;</code> including the bean
      <code>org.talend.esb.locator.LocatorFeature</code>. You should specify
      following properties in your Spring configuration file: <informaltable>
          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>
                  <para>Property name</para>
                </entry>

                <entry>
                  <para>Description</para>
                </entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>
                  <code>endpointPrefix</code>
                </entry>

                <entry>necessary when running in a container where the
                endpoint is only relative to the conatiner. By default prefix
                is an empty string.</entry>
              </row>

              <row>
                <entry>
                  <code>locatorEndpoints</code>
                </entry>

                <entry>Service Locator endpoints must be configurable in the
                feature. If not, the default localhost endpoint
                <code>"localhost:2181"</code> is taken as long as nobody sets
                new endpoints via setLocatorEndpoints. Specify the endpoints
                of all the instances belonging to the service locator ensemble
                the service locator client might be talking to. The service
                locator client will pick an endpoint one by one (the order is
                non-deterministic) to connect to the service locator until a
                connection is established.</entry>
              </row>

              <row>
                <entry>
                  <code>connectionTimeout</code>
                </entry>

                <entry>specify the time the service locator client waits for a
                connection to get established. Must be greater than zero, by
                default 5000 ms.</entry>
              </row>

              <row>
                <entry>
                  <code>sessionTimeout</code>
                </entry>

                <entry>specify the time out of the session established at the
                server. The session is kept alive by requests sent by the
                client. If the session is idle for a period of time that would
                timeout the session, the client will send a ping request to
                keep the session alive. Must be greater than zero and less
                than 60000, by default 5000 ms.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

            <example xml:id="ex.slspringconfendpoint">
                    <title>Talend ESB ServiceLocator Feature configuration for endpoint </title>
                    <programlisting>
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
            xmlns:jaxws="http://cxf.apache.org/jaxws"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

    &lt;import resource="classpath:META-INF/cxf/cxf.xml" />
    &lt;import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
    &lt;import resource="classpath:META-INF/cxf/cxf-servlet.xml" /> 

    &lt;jaxws:endpoint xmlns:tns="http://talend.org/esb/examples/"
            id="greeter"
            implementor="demo.service.GreeterImpl"
            serviceName="tns:GreeterService"
            address="/GreeterService">
        &lt;jaxws:features>
            &lt;bean class="org.talend.esb.locator.LocatorFeature">
                &lt;property name="endpointPrefix" 
                    value="http://localhost:8080/locator-demo-war"/>
            &lt;/bean>
        &lt;/jaxws:features>
    &lt;/jaxws:endpoint>
&lt;/beans>
                    </programlisting>
                </example>

      <para>In the example above you can see that locator client was added
      through configuration exactly the same way as a standard CXF feature
      using <code>&lt;jaxws:features&gt;</code>, and property endpointPrefix
      was set to locator faeture.</para>

      <para>So in this example, endpoint will register into the endpoint
      repository using the name
      <code>http://localhost:8080/locator-demo-war/GreeterService</code>.</para>

      <para>Note: Property locatorEndpoints was not set, which means the 
      default value will be used. This means the Locator server must started on 
      localhost and configured
      for the 2181 port to listen for client connections. To learn more about
      installation and configuration Locator server, read the Service Locator
      Installation Manual.</para>
    </section>

    <section>
      <title>Using ServiceLocator Feature programmatically</title>
    </section>

    <para>Alternatively you can add the feature to the CXF service provider by
    using ServerFactoryBean</para>

                <example xml:id="ex.slproguseprovside">
                    <title>Talend ESB ServiceLocator Feature programmatically using provider side</title>
                    <programlisting>
String port = "8080";
String address = String.format(
    "http://provider_host:%1$s/services/Greeter", port);
        
LocatorFeature locatorFeature = new LocatorFeature();
locatorFeature.setLocatorEndpoints(
    "locator_host1:2181,locator_host2:2181");

Greeter greeterService = new GreeterImpl();
JaxWsServerFactoryBean server = new JaxWsServerFactoryBean();
server.setServiceBean(greeterService);
server.setAddress(address);
        
server.getFeatures().add(locatorFeature);
server.create();
</programlisting>
</example>  

    <para>In the code above only one property for the feature was set, so the
    default values will be used for all other properties. For example, endpointPrefix
    will be an empty string. So in this example endpoint will be registered into the
    endpoint repository using the name
    <code>http://provider_host:8080/services/Greeter</code>.</para>
  </chapter>

  <chapter>
    <title>Consumer side configuration</title>

    <section>
      <title>Spring configuration</title>
    </section>

    <para>To add the Locator feature to a CXF service consumer, use
    <code>&lt;jaxws:client&gt;</code> including the bean
    <code>org.talend.esb.locator.LocatorFeature</code>. You should specify
    following properties in your Spring configuration file: <informaltable>
        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*" />

          <colspec colnum="2" colwidth="2*" />

          <thead>
            <row>
              <entry>
                <para>Property name</para>
              </entry>

              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>
                <code>locatorEndpoints</code>
              </entry>

              <entry>Service Locator endpoints must be configurable in the
              feature. If not, the default localhost endpoint
              <code>"localhost:2181"</code> is taken as long as nobody sets
              new endpoints via setLocatorEndpoints. Specify the endpoints of
              all the instances belonging to the service locator ensemble the
              service locator client might be talking to. The service locator
              client will pick an endpoint one by one (the order is
              non-deterministic) to connect to the service locator until a
              connection is established.</entry>
            </row>

            <row>
              <entry>
                <code>connectionTimeout</code>
              </entry>

              <entry>specify the time the service locator client waits for a
              connection to get established. Must be greater than zero, by
              default 5000 ms.</entry>
            </row>

            <row>
              <entry>
                <code>sessionTimeout</code>
              </entry>

              <entry>specify the time out of the session established at the
              server. The session is kept alive by requests sent by the
              client. If the session is idle for a period of time that would
              timeout the session, the client will send a ping request to keep
              the session alive. Must be greater than zero and less than
              60000, by default 5000 ms.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

                <example xml:id="ex.slspringconfclient">
                    <title>Talend ESB ServiceLocator Feature configuration for client </title>
                    <programlisting>
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:jaxws="http://cxf.apache.org/jaxws"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

    &lt;import resource="classpath:META-INF/cxf/cxf.xml" />
    &lt;import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
    &lt;import resource="classpath:META-INF/cxf/cxf-servlet.xml" /> 

    &lt;jaxws:client id="GreeterClient" serviceClass="demo.common.Greeter"
        address="locator://">
        &lt;jaxws:features>
            &lt;bean class="org.talend.esb.locator.LocatorFeature">
                &lt;property name="locatorEndpoints" value="locator_host:2181"/>
            &lt;/bean>
        &lt;/jaxws:features>
    &lt;/jaxws:client>
&lt;/beans>
                    </programlisting>
                </example>

    <para>In the example above you can see that Locator client was added
    through configuration in exactly the same way as a standard CXF feature using
    <code>&lt;jaxws:features&gt;</code>, and the property
    <code>locatorEndpoints</code> was set to locator feature. Another
    important point is to configure the JAX-WS client address. We must use the locator
    protocol for client:
    <code>address="locator://more_useful_information"</code>.</para>

    <section>
      <title>Using ServiceLocator Feature programmatically</title>
    </section>

    <para>Alternatively you can add the feature to the CXF service consumer by
    using the ClientFactoryBean.
        </para>
                <example xml:id="ex.slproguseconsside">
                    <title>Talend ESB ServiceLocator Feature programmatically using consumer side</title>
                    <programlisting>
JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
LocatorFeature locatorFeature = new LocatorFeature();
locatorFeature.setLocatorEndpoints("sop-td57:2181");

factory.getFeatures().add(locatorFeature);
factory.setServiceClass(Greeter.class);
factory.setAddress("locator://more_useful_information");
Greeter client = (Greeter) factory.create();

String response = client.greetMe("MyName");
                    </programlisting>
                </example>
        <para>In the code above only one property for the feature was set. So
    default values will be used for all other properties. The address with the locator protocol
    was set in factorybean:
    <code>factory.setAddress("locator://more_useful_information");</code></para>
  </chapter>
</book>
