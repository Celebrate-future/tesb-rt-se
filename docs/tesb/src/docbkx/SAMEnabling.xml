<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  ESB :: Manual
  %%
  Copyright (C) 2011 Talend Inc.
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<chapter version="5.0" xmlns="http://docbook.org/ns/docbook">
  <title>Enabling the demo to use Service Activity Monitoring</title>

  <section>
    <title>Purpose of Service Activity Monitoring</title>

The Service Activity Monitoring (SAM) component allows for logging and monitoring service calls made with the Apache CXF Framework. 
Typical use cases are: collecting usage statistics and fault monitoring. This component consists of two parts: 
<itemizedlist>
<listitem>
<para>Agent (sam-agent): 
</para>
</listitem>
<listitem> 
<para>Monitoring Server (sam-server) 
</para>
</listitem>
</itemizedlist>
<para>The sequence of how these are used is as follows:</para>
<orderedlist>
<listitem> <para>
The Agent creates events out of requests and replies from both the service consumer and provider side.
</para></listitem>
<listitem> <para>
The events are first collected locally and then sent to the Monitoring Server periodically (so as not to disturb the normal message flow). 
</para></listitem> 
<listitem> <para>
When the Monitoring Server receives events from the Agent, it optionally uses filters and/or handlers on those events and stores them into a database.
</para></listitem>
</orderedlist>
<para>The Agent and Monitoring Service are made available as follows:</para>
<itemizedlist> 
<listitem><para>
The Agent is packaged as a JAR that needs to be on the classpath of the service consumer and provider. </para></listitem> 
<listitem> <para> 
The Monitoring Server is deployed as a WAR in a servlet container and needs access to a database. </para></listitem> 
</itemizedlist>

<para>
One service call can generate four events:
For example: A consumer is sending a request (REQ_OUT), the service receives request (REQ_IN), 
the service sends response (RESP_OUT) and the consumer receives response (RESP_IN). </para>
<para> An Agent can be configured to collect all four events in this service call, on both the consumer and provider side. 
For further event processing all of these events will get the same "flow id". </para>  </section>

  <section>
  <title>Architecture</title>
		<para>
On the left of the below diagram the Agent is described, on the right the Monitoring Server. The Agent is used to collect all message data from both the service and client and sends this data to the Monitoring Server. The Monitoring Server will receive events and store them into the database. A web service is used as the interface between the Agent and the Monitoring Server.		
		</para>
	<mediaobject>
	  <imageobject>
		 <imagedata fileref="images/sam_architecture.jpg" format="jpg"/>
	  </imageobject>
	</mediaobject>    
		<para>
The FlowId Producer is a component used to generate the FlowId (a UUID) for the Message Header and pass it to subsequent messages.

For each message exchange, the flow id is created if there is no flow id present. So, for the first client the flow id 
is created for each service call. When you have an intermediary this receives a service call, but also calls other services; then the flow id 
is carried from the incoming call to all calls that follow this call. Then on the server side the flow id is taken from the request and also 
set on the response.
</para>
		<para>
Filters or handlers can be set up on both the Agent side and Monitoring Server side, and can subsequently be used to filter events and manipulate the event's content. There are some built-in filters and handlers (eg. StringContentFilter, PasswordHandler) and you can develop your own filters and handlers by extending the EventFilter or EventHandler Service Provider Interface (SPI).
		</para>
  </section>
  
  <section>
    <title>Configure and Run Monitoring Server</title>
	<para>If you want to configure some properties (eg. db.url), please edit: </para>
	<para>
	<userinput>talend-esb-&lt;version&gt;/examples/tesb/sam/sam-server-war/src/main/webapp/WEB-INF/logserver.properties</userinput>
	</para>

	<para>For this example, using Jetty Database is best choice. For example: </para>
<programlisting>	
monitoringServiceUrl=/MonitoringServiceSOAP
db.driver=org.apache.derby.jdbc.ClientDriver
db.url=jdbc:derby://localhost:1527/db;create=true
db.username=test
db.password=test
db.incrementer=derbyIncrementer

db.recreate=true
db.createsql=create.sql
</programlisting>

	<para>Start Monitoring Server: </para>
	<para><userinput>cd
      talend-esb-&lt;version&gt;/examples/tesb/sam/sam-server-jetty</userinput></para>
	<para><userinput>mvn jetty:run-war</userinput></para>
	<para>then, Monitoring Server will be started.</para>
  </section>
  
  <section>
    <title>Build the examples with SAM Agent enabled</title>
	<procedure>
		<step>
		<para>Using Maven with sam profile</para>
      <para>From the base directory of the ESB sample, the maven
            <code>talend-esb-&lt;version&gt;/examples/tesb/rent-a-car/pom.xml</code> file can be
          used to build the demo.</para>

      <para>Running Maven command on either UNIX or Windows: <userinput>mvn clean install -Psam</userinput></para>

      <para>Running this command will build the demo and create OSGi bundles
      to be deployed to an OSGi container.</para>
		</step>
		
		<step>
		<para>What changed when build the examples with SAM Agent enabled:</para>
		<para>
The jaxws:features of SAM Agent will be added into spring beans xml file of related client/service-endpoint.
<literallayout><computeroutput>
&lt;import resource="classpath:META-INF/tesb/agent-context.xml" />
...
&lt;jaxws:features>
	&lt;ref bean="eventFeature"/>
&lt;/jaxws:features>
</computeroutput></literallayout>	
		</para>
		<para>
The MANIFEST.MF of related client/service-endpoint will be updated by adding Require-Bundle:sam-agent,sam-common.		
		</para>
		</step>
	</procedure>
  </section>
  
  <section>
    <title>Install the examples on TESB Container</title>

    <para> From the TESB container directory, type in these console commands:</para>
	<para><userinput>features:addurl mvn:org.talend.esb.examples.rent-a-car/features-sam/4.0/xml</userinput></para>
	<para>Eventually (when previous examples have already been installed): <userinput>features:refreshurl</userinput></para>
	<para><userinput>features:install tesb-rac-app-sam</userinput></para>
	<para><userinput>features:install tesb-rac-services-sam</userinput></para>
	<para>Then, you can use the <userinput>list</userinput> command to check if everything installed properly:</para>
	<para><userinput>list</userinput></para>
    <para>For example: </para>
<literallayout><computeroutput>
[143] [Active][       ] [       ] [ 60] Service Activity Monitoring :: Common 
(4.0.0)
[144] [Active][       ] [       ] [ 60] Service Activity Monitoring :: Agent 
(4.0.0)
[145] [Active][       ] [       ] [ 60] CRMService Common (4.0.0)
[146] [Active][       ] [       ] [ 60] ReservationService Common (4.0.0)
[147] [Active][       ] [Started] [ 60] CRMService Client (4.0.0)
[148] [Active][       ] [Started] [ 60] ReservationService Client (4.0.0)
[149] [Active][Created] [Started] [ 60] App Reservation (4.0.0)
[150] [Active][       ] [       ] [ 60] CRMService Service (4.0.0)
[151] [Active][       ] [Started] [ 60] CRMService Service Endpoint SAM (4.0.0
)
[152] [Active][       ] [       ] [ 60] ReservationService Service (4.0.0)
[153] [Active][       ] [Started] [ 60] ReservationService Service Endpoint SAM
()4.0.0)
</computeroutput></literallayout>	  

  </section>

  <section>
    <title>View the Events in the Database</title>

    <para>
When Rent-a-Car demo running, user can monitor the EVENTS table and EVENTS_CUSTOMINFO table using DbVisualizer(or other DB tools). 
	</para>
<literallayout><computeroutput>
Database connection configuration (Default): 
DB Driver:   org.apache.derby.jdbc.ClientDriver
DB URL:      jdbc:derby://localhost:1527/db
DB username: test
DB password: test 	
</computeroutput></literallayout>
	<para>
DB connection which configured in DbVisualizer must correspond to setting of sam-server-war/WEB-INF/logserver.properties. 
	</para>
	<para>
Then, the data of EVENTS table and EVENTS_CUSTOMINFO table can be browsed/monitored in DbVisualizer. For example, the data of EVENTS table will be looked like:	
	</para>
	<mediaobject>
	  <imageobject>
		 <imagedata fileref="images/sam_db_narrow.png" format="png" scale="80"/>
	  </imageobject>
	</mediaobject>
	<para>
For more information about the table's schema definition, please look in 
Appendix A: Event Structure and Appendix B: EVENTS_CUSTOMINFO Structure in the 
Service Activity Monitoring (SAM) User Guide document.
	</para>
  </section>
</chapter>
