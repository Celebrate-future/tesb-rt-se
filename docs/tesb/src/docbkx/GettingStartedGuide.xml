<?xml version="1.0" encoding="utf-8"?>
<!--
  #%L
  ESB :: Manual
  %%
  Copyright (C) 2011 Talend Inc.
  %%
	This documentation is provided under the terms of the Creative Commons Public License (CCPL).
	For more information about what you can and cannot do with this documentation in accordance with the
	CCPL, please read: http://creativecommons.org/licenses/by-nc-sa/2.0/
  #L%
  -->

<!DOCTYPE book[
<!ENTITY chapSLEnabling SYSTEM "SLEnabling.xml">
<!ENTITY chapSAMEnabling SYSTEM "SAMEnabling.xml">
<!ENTITY chapSTSEnabling SYSTEM "STSEnabling.xml">
]>
<book version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <info>
        <title>Talend ESB</title>
        <subtitle>Getting Started Guide</subtitle>
         <subtitle>Covers 4.0</subtitle>
        <pubdate>26 April 2011</pubdate>
        <author>
            <orgname>Talend Corporation</orgname>
        </author>
        <copyright>
            <year>2011</year>
            <holder>Talend Corporation</holder>
        </copyright>
        <legalnotice>
        	<title>Copyleft</title>
		   	<para>
				This documentation is provided under the terms of the Creative Commons Public License (CCPL).
				For more information about what you can and cannot do with this documentation in accordance with the
				CCPL, please read: http://creativecommons.org/licenses/by-nc-sa/2.0/
		    </para>
		</legalnotice>
		<legalnotice>
			<title>Notices</title>
		   	<para>
		       	Talend, Talend Integration Factory, Talend Service Factory, and Talend ESB are trademarks of Talend, Inc.
		    </para>
		    <para>
		      	Apache CXF, CXF, Apache Karaf, Karaf, Apache Camel, Camel, Apache Maven, and Maven are trademarks of The Apache Foundation.
		    </para>
		    <para>
		       	Eclipse Equinox is a trademark of the Eclipse Foundation.
		    </para>
		    <para>
		       	All other brands, product names, company names, trademarks and service marks are the properties of their respective owners.
		    </para>
		</legalnotice>
    </info>
    <chapter>
        <title>Overview</title>
        <para>The Enterprise Service Bus (ESB) has always been the
            cornerstone of every vendor&apos;s Service Oriented Architecture
            (SOA) strategy. In the past, however, ESBs have often failed to
            help leverage the full value of SOA. This was due to their large
            footprint, centralized architecture, and considerable effort
            required to properly integrate them into an existing application
            landscape. Unlike these ESB solutions Talend ESB has relatively
            small size, using of proven open source technologies allows to
            create and coordinate work of distributed, highly reliable business
            applications without much effort.</para>
        <para>In this Getting Started Guide you will learn about Talend
            ESB/CXF. This guide contains a simplified real-world example, using
            the domain of car rental companies to demonstrate the use of Talend
            ESB for developing and deploying services.</para>
        <para>You will first learn the design of the Rent a Car Demo. Then we will show how to
            compile the demo, deploy it into the Talend ESB Runtime OSGi container and then activate
            it. </para> 
            <para>You will also learn how to enable the Service Locator Component for the Rent a Car
            demo, and how Service Activity Monitoring can be enabled.</para>
    </chapter>
    <chapter>
        <title>Rent a Car Demo Example</title>
        <para>For this demo example we have chosen a common business use
            case scenario: a simplified real-world example from the domain of
            car rental companies. This uses the functionality of the Customer Relationship Management(CRM) service
            to supply information about the customer, and the reservation service to reserve the car.</para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/schema.jpg" format="jpg"/>
            </imageobject>
        </mediaobject>
        <para>In the course of working through this example you will learn
            how to:</para>
        <itemizedlist>
            <listitem>compile and build Apache CXF services</listitem>
            <listitem>deploy services using the Karaf OSGi console</listitem>
            <listitem>use OSGi commands</listitem>
        </itemizedlist>
        <para>In this scenario, there are two main services that will be
            demonstrated, ReservationService and CRMService. You will create
            and orchestrate these services with the help of a simple graphical
            rent-a-car client application, called Rental Client.</para>
        <para>Rental Client provides the basic functionality to search for
            the available cars within a given time period.  To implement its business logic 
            the rental client calls operations of
            both the CRM Service and the Reservation Service, and this is described in the diagram below.
            <orderedlist>
            <listitem>
            The <emphasis role="strong">search</emphasis> takes
            into account the status (silver, gold, platinum) of the client name 
            you select - the customer profile information
            is passed to the reservation service.
            This criteria will then determine the outcome of the search. </listitem>
            <listitem>From
            the list of results you can select the car that best fulfills your
            requirements and then make your reservation simply by clicking on
            the <emphasis role="strong">Book</emphasis> button. </listitem>
            <listitem>At the end of the submission process,
            <emphasis role="strong">confirmation</emphasis> of your booking is displayed with your Reservation
            ID. </listitem>
            </orderedlist></para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/operations.jpg" format="jpg" scale="85"/>
            </imageobject>
        </mediaobject>
    </chapter>
    <chapter>
        <title>How to build the Demo</title>
        <section>
            <title>System Requirements</title>
            <para>The Talend ESB and examples can be installed, built, and run on Windows or on
                UNIX/Linux for which Java 6 is available. The following software
                is required for installing, building, and running the samples:</para>
            <procedure>
                <step>
                    <para>JDK 1.6.0 from Oracle should be installed, and the environment variable
                        <code>JAVA_HOME</code> should be set to the JDK installation directory.
                        Later JDKs from Oracle or JDKs from other providers may work but have not
                        been tested.</para>
                </step>
                <step>
                    <para>Apache Maven 3.0.3 or later should be installed, and the
                        <code>mvn</code> executable should be in your <code>PATH</code>. When
                        running <code>mvn</code>, HTTP access to the internet is required.
                        The local Maven repository is expected to be created in its default
                        location, that is, the Maven configuration should not have been
                        modified.</para>
                </step>
            </procedure>
        </section>
        <section>
            <title>Installation of the Talend ESB</title>
            <para>The Talend ESB is provided as two archives 
              (<code>&lt;version&gt;</code> is replaced by the ESB version,
                for example: &quot;<code>4.0</code>&quot;). These are:
                
                <para>For Windows:
                <para> <code>talend-esb-&lt;version&gt;.zip</code> and
                <code>talend-esb-&lt;version&gt;-doc.zip</code></para></para>
                
                <para>for
                UNIX/Linux: <para> <code>talend-esb-&lt;version&gt;.tar.gz</code>
                and <code>talend-esb-&lt;version&gt;-doc.tar.gz</code></para></para>
                
                <para>When unpacked to a directory of your choice, a directory
                <code>talend-esb-&lt;version&gt;</code> is created which
                contains Talend ESB and examples. Directory paths mentioned in the
                following chapters will by default be relative to this
                directory.</para>
                </para>
        </section>
        <section>
            <title>Rent a Car Demo structure</title>
            This consists of three items:
            <procedure>
                <step>
                    <para>CRMService example</para>
                    <para>This example for the CRMService Web service is found in directory
                            <code>talend-esb-&lt;version&gt;/examples/tesb/rent-a-car/crmservice/</code>.
                        It consists of four parts (the other directories in this place belong to
                        other examples and are described there):<informaltable>
                            <tgroup cols="2">
                                <colspec colnum="1" colwidth="1*"/>
                                <colspec colnum="2" colwidth="2*"/>
                                <thead>
                                    <row>
                                        <entry>
                                            <para>Example part</para>
                                        </entry>
                                        <entry>
                                            <para>Description</para>
                                        </entry>
                                    </row>
                                </thead>
                                <tbody>
                                    <row>
                                        <entry><code>common/</code></entry>
                                        <entry>This directory contains the CRMService.wsdl which is
                                            used to generate the initial code.</entry>
                                    </row>
                                    <row>
                                        <entry><code>service/</code></entry>
                                        <entry>CRMService service implementation.</entry>
                                    </row>
                                    <row>
                                        <entry><code>service-endpoint/</code></entry>
                                        <entry>CRMService service JAX-WS endpoint.</entry>
                                    </row>
                                    <row>
                                        <entry><code>client/</code></entry>
                                        <entry>This is an example client application that shows how
                                            CXF JAX-WS proxies invoke remote JAX-WS endpoints
                                            hosting the CRMService interface</entry>
                                    </row>
                                </tbody>
                            </tgroup>
                        </informaltable>
                    </para>
                </step>
                <step>
                    <para>ReservationService example</para>
                    <para>This example is found in directory
                            <code>talend-esb-&lt;version&gt;/examples/tesb/rent-a-car/reservationservice/</code>.
                        It consists of four parts (the other directories in this place belong to
                        other examples and are described there):<informaltable>
                            <tgroup cols="2">
                                <colspec colnum="1" colwidth="1*"/>
                                <colspec colnum="2" colwidth="2*"/>
                                <thead>
                                    <row>
                                        <entry>
                                            <para>Example part</para>
                                        </entry>
                                        <entry>
                                            <para>Description</para>
                                        </entry>
                                    </row>
                                </thead>
                                <tbody>
                                    <row>
                                        <entry><code>common/</code></entry>
                                        <entry>This directory contains the ReservationService.wsdl
                                            which is used to generate the initial code.</entry>
                                    </row>
                                    <row>
                                        <entry><code>service/</code></entry>
                                        <entry>ReservationService service implementation.</entry>
                                    </row>
                                    <row>
                                        <entry><code>service-endpoint/</code></entry>
                                        <entry>ReservationService service JAX-WS endpoint.</entry>
                                    </row>
                                    <row>
                                        <entry><code>client/</code></entry>
                                        <entry>This is an example client application that shows how
                                            CXF JAX-WS proxies invoke remote JAX-WS endpoints
                                            represented by the ReservationService interface.</entry>
                                    </row>
                                </tbody>
                            </tgroup>
                        </informaltable>
                    </para>
                </step>
                <step>
                    <para>&quot;app-reservation&quot; project bundle</para>
                    <para>Directory
                            <code>talend-esb-&lt;version&gt;/examples/tesb/rent-a-car/app-reservation/</code>
                        contains the Maven project for creating the car reservation example
                        application OSGi bundle.</para>
                </step>
            </procedure>
        </section>
        <section>
            <title>Building the &quot;Rent a Car&quot; Demo example</title>
            <para>From the base directory of the ESB example, that is
                    <code>talend-esb-&lt;version&gt;/examples/tesb/rent-a-car/</code>, the Maven
                project file <code>pom.xml</code> can be used to build the demo. After changing to
                this directory, Maven is invoked equally from a UNIX/Linux terminal or the Windows
                command line:</para>
            <para><userinput>mvn clean install</userinput></para>
            <para>Running this command, the demo is built, and OSGi bundles
                are created for deployment into an OSGi container.</para>
        </section>
    </chapter>
    <chapter xml:id="rac.deploy">
        <title>Deploying the &quot;Rent a Car&quot; demo in the Talend ESB
            Runtime OSGi container</title>
        <section>
            <title>Create a secondary OSGi container</title>
            <para>One OSGi container is included in the installation in sub-directory
                <code>container</code>. However, for trying out all aspects of the
                examples it is recommended to have two OSGI containers. This can be
                achieved by the following procedure:</para>
            <procedure>
                <step>
                    <para>Create a copy of directory <code>container</code> with
                        all its content. In a UNIX/Linux terminal resp. on the 
                        Windows command line, change the current directory to 
                        <code>talend-esb-&lt;version&gt;</code>. From there, under
                        UNIX/Linux execute the following command:</para>
                    <para><userinput>cp -r container alternate-container</userinput></para>
                    <para>Under Windows, execute the following command instead:</para>
                    <para><userinput>robocopy /e container alternate-container</userinput></para>
                    <para>or</para>
                    <para><userinput>xcopy /e container alternate-container</userinput></para>
                    <para>if you have an older Windows version where <code>robocopy</code>
                        is not available.</para>
                    <para>Now, you have a second OSGi container in directory
                        <code>alternate-container</code>.</para>
                </step>
                <step>
                    <para>In order to avoid conflicts between the two container instances,
                        the configuration of the <code>alternate-container</code> needs
                        to be adapted. For this purpose open the configuration file
                        <code>alternate-container/etc/org.apache.karaf.management.cfg</code>
                        in your favourite text editor. Search line</para>
                    <para><computeroutput>rmiRegistryPort = 1099</computeroutput></para>
                    <para>and replace it with</para>
                    <para><computeroutput>rmiRegistryPort = 11099</computeroutput></para>
                    <para>or another unused port. Moreover, search line</para>
                    <para><computeroutput>rmiServerPort = 44444</computeroutput></para>
                    <para>and replace it with</para>
                    <para><computeroutput>rmiServerPort = 44445</computeroutput></para>
                    <para>or another unused port.</para>
                </step>
                <step>
                    <para>Next, open the configuration file
                        <code>alternate-container/etc/org.apache.karaf.shell.cfg</code>
                        in your favourite text editor. Search line</para>
                    <para><computeroutput>sshPort = 8101</computeroutput></para>
                    <para>and replace it with</para>
                    <para><computeroutput>sshPort = 18101</computeroutput></para>
                    <para>or another unused port.</para>
                </step>
                <step>
                    <para>Next, open the configuration file
                        <code>alternate-container/etc/org.ops4j.pax.web.cfg</code>
                        in your favourite text editor. Search line</para>
                    <para><computeroutput>org.osgi.service.http.port=8080</computeroutput></para>
                    <para>and replace it exactly with</para>
                    <para><computeroutput>org.osgi.service.http.port=8081</computeroutput></para>
                    <para>because this alternate port (8081) will be needed
                        in one of the examples.</para>
                </step>
                <step>
                    <para>Finally, open the configuration file
                        <code>alternate-container/etc/system.properties</code>
                        in your favourite text editor. Search line</para>
                    <para><computeroutput>org.osgi.service.http.port=8181</computeroutput></para>
                    <para>and replace it with</para>
                    <para><computeroutput>org.osgi.service.http.port=18181</computeroutput></para>
                    <para>or another unused port.</para>
                    <para>Now, two OSGi containers are available for running the examples.</para>
                </step>
            </procedure>
        </section>
        <section>
            <title>Start the OSGi console</title>
            <para>Start the OSGi container running program
                <code>talend-esb-&lt;version&gt;/container/bin/tesb</code> (UNIX/Linux)
                resp. <code>talend-esb-&lt;version&gt;\container\bin\tesb.bat</code>
                (Windows).</para>
            <para>Under UNIX/Linux, go to directory
                <code>talend-esb-&lt;version&gt;</code> 
                and execute the following command:</para>
            <para><userinput>./container/bin/tesb</userinput></para>
            <para>Under Windows, go to directory
                <code>talend-esb-&lt;version&gt;</code> 
                and execute the following command:</para>
            <para><userinput>.\container\bin\tesb.bat</userinput></para>
            <para>The second container is started up the same way. Just replace
                <code>./container/...</code> by <code>./alternate-container/...</code>.</para>
            <para>When the container starts up, you will see a short introduction
                followed by the OSGi console command prompt:</para>
            <para><userinput>karaf@tesb&gt; </userinput></para>
            <para>The OSGi commands explained in the following sections will be
                entered here.</para>
            <para>However, especially if you start up an OSGi container for the first time, you
                should allow some more 10 to 20 seconds for the OSGi container to start up and
                configure itself properly before entering any command at the prompt. Especially, it
                should not be shut down. Otherwise, when it is started up again, it will not
                activate properly all components but only those which were up and running when it
                was shut down.</para>
            <para>In order to ensure that the container has started up and activated all components,
                enter the following command at the OSGi console prompt:</para>
            <para><userinput>list</userinput></para>
            <para>You should get a listing like the following fragment:</para>
            <literallayout><computeroutput>
START LEVEL 100 , List Threshold: 50
   ID   State         Blueprint      Spring    Level  Name
[  42] [Active     ] [            ] [       ] [   60] Apache ServiceMix :: Bun
dles :: aopalliance (1.0.0.4)
[  43] [Active     ] [            ] [       ] [   60] Spring Core (3.0.5.RELEA
SE)
[  44] [Active     ] [            ] [       ] [   60] Spring ASM (3.0.5.RELEAS
E)
[  45] [Active     ] [            ] [       ] [   60] Spring Expression Langua
ge (3.0.5.RELEASE)
...         </computeroutput></literallayout>
            <para>Make sure all components show state &quot;Active&quot; before you initiate any
                further action. If any component remains in state &quot;Resolved&quot;, you can
                manually activate it entering &quot;<userinput>start &lt;ID&gt;</userinput>&quot;
                where &quot;&gt;ID&lt;&quot; becomes the number in the first column, for example,
                &quot;<userinput>start 100</userinput>&quot; activates the component with ID
                &quot;100&quot;.</para>
            <para>You can find further information about the OSGi container
                used by the TESB and how to get started it at the
                &quot;Karaf&quot; site
                <link xlink:href="http://karaf.apache.org/">http://karaf.apache.org/</link>.</para>
        </section>
        <section>
            <title>Deploy the demo services</title>
            <procedure>
                <step>
                    <para>Add the &quot;Rent A Car&quot; feature location into the primary 
                    (<code>talend-esb-&lt;version>/container/</code>) OSGI container, not in the alternate-container.</para>
                    <para>At the OSGi console prompt, type the following
                        command:</para>
                    <para><userinput>features:addurl mvn:org.talend.esb.examples.rent-a-car/features/4.0/xml</userinput></para>
                    <para>This command allows to use the bundles directly from the Maven
                        repository where they have been installed by the Maven build.</para>
                    <para>Note: This command refers to version &quot;4.0&quot;
                        of the Talend ESB. If you are using another version,
                        replace the version sub-string
                        <userinput>.../4.0/...</userinput>
                        by the number of your version.</para>
                </step>
                <step>
                    <para>Install the &quot;Rent A Car&quot; services feature
                        into the OSGi container.</para>
                    <para>Type the following console command:</para>
                    <para><userinput>features:install tesb-rac-services</userinput></para>
                    <para>The services feature must be installed in the primary container, not in
                        the <code>alternat-container</code> because it relies on port 8080 to be
                        opened for incoming HTTP calls, as it is configured for the primary
                        container.</para>
                </step>
                <step>
                    <para>Check feature installation success.</para>
                    <para>Type the following console command:</para>
                    <para><userinput>list</userinput></para>
                    <para>You will see the demo bundles in the list of
                        installed bundles:</para>
                    <literallayout><computeroutput>
[ 137] [Active     ] [            ] [       ] [   60] CRMService Common (4.0.0
)
[ 138] [Active     ] [            ] [       ] [   60] ReservationService Commo
n (4.0.0)
[ 139] [Active     ] [            ] [       ] [   60] CRMService Service (4.0.
0)
[ 140] [Active     ] [            ] [Started] [   60] CRMService Service Endpo
int (4.0.0)
[ 141] [Active     ] [            ] [       ] [   60] ReservationService Servi
ce (4.0.0)
[ 142] [Active     ] [            ] [Started] [   60] ReservationService Servi
ce Endpoint (4.0.0)
                    </computeroutput></literallayout>
                </step>
            </procedure>
        </section>
        <section>
            <title>Deploy the demo application</title>
            <para>The demo application can be deployed in the same OSGi container as
                the service or in the second container.</para>
            <procedure>
                <step>
                    <para>If the second container is used for deployment of the demo application,
                        add the &quot;Rent A Car&quot; feature location into this OSGi container.
                        The feature location needs to be added only once in each container, even
                        if the container is shut down afterwards and re-started. However, if unsure,
                        you may add the feature location again at any time.</para>
                    <para>At the OSGi console prompt, type the following
                        command:</para>
                    <para><userinput>features:addurl mvn:org.talend.esb.examples.rent-a-car/features/4.0/xml</userinput></para>
                    <para>Note: This command refers to version &quot;4.0&quot;
                        of the Talend ESB. If you are using another version,
                        replace the version sub-string
                        <userinput>.../4.0/...</userinput>
                        by the number of your version.</para>
                    <para>If you have already run the previous example, you may need to run the
                        following command in order to ensure that internal bundle caches are
                        updated:</para>
                    <para><userinput>features:refreshurl</userinput></para>
                </step>
                <step>
                    <para>Install the &quot;Rent A Car&quot; application
                        feature into the OSGi container.</para>
                <para>Type the following console command:</para>
                    <para><userinput>features:install tesb-rac-app</userinput></para>
                </step>
                <step>
                    <para>Check feature installation success.</para>
                    <para>Type the following console command:</para>
                    <para><userinput>list</userinput></para>
                    <para>You will see the demo bundles in the list of
                        installed bundles:</para>
                    <literallayout><computeroutput>
[ 137] [Active     ] [            ] [       ] [   60] CRMService Common (4.0.0
)
[ 138] [Active     ] [            ] [       ] [   60] ReservationService Commo
n (4.0.0)
[ 139] [Active     ] [            ] [Started] [   60] CRMService Client (4.0.0
)
[ 140] [Active     ] [            ] [Started] [   60] ReservationService Clien
t (4.0.0)
[ 141] [Active     ] [Created     ] [Started] [   60] App Reservation (4.0.0)
                    </computeroutput></literallayout>
                </step>
            </procedure>
        </section>
        <section><title>Undeploy the demo</title>
             <para>If you later want to uninstall the demo services, for example,
                because you want to move them to the other container, execute
                this command at the OSGi console:</para>
            <para><userinput>features:uninstall tesb-rac-services</userinput></para>
            <para>Then, you can install them again as described above.</para>

            <para>If you want to uninstall the demo application, execute
                this command at the OSGi console:</para>
            <para><userinput>features:uninstall tesb-rac-app</userinput></para>
            <para>Then, you can install it again as described above.</para>
        
            <para>If you want to uninstall all the demo features, for example,
                because you want to try another scenarios from this guide, execute
                following commands at the OSGi console:</para>
            <para><userinput>features:uninstall tesb-rac-services</userinput></para>
            <para><userinput>features:uninstall tesb-rac-app</userinput></para>
            <para><userinput>features:uninstall tesb-rac-common</userinput></para>   
            <para>Then enter <userinput>features:list</userinput> to ensure that
                all features have actually been uninstalled. You should see this
                in the console:</para>
    	<para>
    		<programlisting>[uninstalled] [4.0            ] tesb-rac-common               repo-0
[uninstalled] [4.0            ] tesb-rac-services             repo-0
[uninstalled] [4.0            ] tesb-rac-app                  repo-0
			</programlisting>
    	</para>
			<para>You can also remove &quot;Rent A Car&quot; feature location from the OSGi 
			    container.</para>
			<para>At the OSGi console prompt, type the following command:</para>
			<para><userinput>features:removeurl mvn:org.talend.esb.examples.rent-a-car/features/4.0/xml</userinput></para>
			<para>Note: This command refers to version &quot;4.0&quot;
                of the Talend ESB. If you are using another version,
                replace the version sub-string
                <userinput>.../4.0/...</userinput>
                by the number of your version.</para>              
        </section>
    </chapter>
    <chapter>
        <title>How to run the &quot;Rent a Car&quot; demo</title>
        <section>
            <title>Use Case Scenario for &quot;Rent a Car&quot;</title>
            <para>A customer enters prerequisite data into a form such as her
                name, the pick-up and return dates, the preferred range of rental
                rates, and submits her query.</para>
            <para>Next, the application calls the CRMService to retrieve the
                customer data and customer status information.</para>
            <para>The customer is presented a list of available cars and
                selects one car from the list.</para>
            <para>Finally, the application calls the ReservationService to
                submit the reservation request and then displays a reservation
                confirmation notice to the customer.</para>
        </section>
        <section>
            <title>Starting the application</title>
            <para>ReservationService, CRMService, and App-reservation are
                already deployed in Talend ESB Runtime. Start the OSGi console
                as described previously. If demo services and demo application
                are deployed in two different containers, both must be started.</para>
            <para>On the console of the container with the demo application
                you will see:</para>
            <literallayout><computeroutput>
---TALEND ESB: Rent a Car (OSGi) Commands---
car:GUI        (Show GUI)
car:search &lt;user&gt; &lt;pickupDate&gt; &lt;returnDate&gt;
   (Search for cars to rent, date format yyyy/mm/dd)
car:rent &lt;pos&gt;
   (Rent a car listed  in search result of carSearch)
            </computeroutput></literallayout>
        </section>
        <section>
            <title>Using the Talend ESB &quot;Rental Client GUI&quot;</title>
            <para>To start the GUI, type <userinput>car:GUI</userinput> in
                the karaf alternate-container console window, that is <code>karaf@test>car:GUI</code>.</para>
                
            <para>Select &quot;aebert&quot; from the drop-down box.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/cargui1.jpg" format="jpg"/>
                </imageobject>
            </mediaobject>
            <para>Click Find to see the results. You will see the list of
                available cars.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/cargui2.jpg" format="jpg"/>
                </imageobject>
            </mediaobject>
            <para>Click the highlighted line or select any other option and
                click &quot;Reserve&quot;.</para>
            <para>You will now see the confirmation page:</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/cargui3.jpg" format="jpg"/>
                </imageobject>
            </mediaobject>
            <para>Click Close to stop the application.</para>
        </section>
        <section>
            <title>Using the &quot;search&quot; command</title>
            <para>In the console type:</para>
            <para><userinput>car:search aebert 2011/01/26 2011/01/26</userinput></para>
            <para>You will see the list of available cars:</para>
            <literallayout><computeroutput>
Found 5 cars.

Car details
1 VW Golf Standard 50.00 75.00 40.00
2 BMW 320i Sport 60.00 90.00 45.00
3 Mazda MX5 Sport 65.00 95.00 50.00
4 Lexus LX400 SUV 85.00 120.00 100.00
5 Mercedes E320 Delux 95.00 140.00 100.00
            </computeroutput></literallayout>
        </section>
        <section>
            <title>Using the &quot;rent&quot; command</title>
            <para>In the console type:
                <userinput>car:rent 2</userinput></para>
            <para>You can now see the confirmation:</para>
            <literallayout><computeroutput>
Reservation ID SGA-686277

Customer details
----------------
Name: Andrea Ebert
eMail: info@sopera.de 
City: Munich
Status: PLATINUM

Car details
-----------
Brand: BMW 
Model: 320i

Reservation details
-------------------
Pick up date: 2011/01/26
Return date: 2011/01/26
Daily rate: 60.00
Weekend rate: 90.00
Credits: 210
Thank you for renting a car with Talend ESB :-)
            </computeroutput></literallayout>
        </section>
    </chapter>
    <chapter>
        <title>How to enable the example in Eclipse</title>
        <para>For more information about how to use the Maven Eclipse Plugin read
            <link xlink:href="http://maven.apache.org/plugins/maven-eclipse-plugin/">http://maven.apache.org/plugins/maven-eclipse-plugin/</link></para>
        <para>For generating the Eclipse configuration files from the base
            directory of the ESB example
            <code>talend-esb-&lt;version&gt;/examples/tesb/rent-a-car</code> run:
            <userinput>mvn eclipse:eclipse</userinput>.</para>
        <para>In the Eclipse IDE
            <procedure>
                <step><para>From the main menu bar, select &quot;File &gt; Import...&quot;.
                    The Import wizard opens.</para></step>
                <step><para>Select &quot;General &gt; Existing Project into Workspace&quot;
                    and click &quot;Next&quot;.</para></step>
                <step><para>Choose &quot;Select root directory&quot; and click the
                    associated &quot;Browse&quot; to locate the ESB example
                    directory.</para></step>
                <step><para>Under &quot;Projects&quot; select the project or projects
                    which you would like to import.</para></step>
                <step><para>Click &quot;Finish&quot; to start the import.</para></step>
            </procedure>
        </para>
        <para>The TESB example projects are imported into the workspace and it is
            possible to see the sources, modify them, and to take advantage of
            all the eclipse features.</para>
        <para>However, the TESB example projects cannot be run in the Eclipse IDE.</para>
    </chapter>
    &chapSLEnabling;
    &chapSAMEnabling;
    &chapSTSEnabling;
 </book>
