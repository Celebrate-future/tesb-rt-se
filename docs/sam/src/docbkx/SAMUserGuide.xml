<?xml version="1.0" encoding="utf-8"?>
<!--
  #%L
  Sam :: Userguide
  %%
  Copyright (C) 2011 Talend Inc.
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<book xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink">
    <info>
        <title>Talend ESB</title>
        <subtitle>Service Activity Monitoring (SAM) User Guide</subtitle>
        <subtitle>Covers 4.0</subtitle>
        <pubdate>26 April 2011</pubdate>
        <author>
            <last>Talend ESB Runtime Team</last>
        </author>
        <copyright>
            <year>2011</year>
            <holder>Talend Corporation</holder>
        </copyright>
    </info>
    <chapter>
        <title>Introduction</title>
        	<para>
The Service Activity Monitoring (SAM) component allows for logging and monitoring service calls made with the Apache CXF Framework. 
Typical use cases are: collecting usage statistics and fault monitoring. This component consists of two parts: 
<itemizedlist>
<listitem>
<para>Agent (sam-agent): 
</para>
</listitem>
<listitem> 
<para>Monitoring Server (sam-server) 
</para>
</listitem>
</itemizedlist>
<para>The sequence of how these are used is as follows:</para>
<orderedlist>
<listitem> <para>
The Agent creates events out of requests and replies from both the service consumer and provider side.
</para></listitem>
<listitem> <para>
The events are first collected locally and then sent to the Monitoring Server periodically (so as not to disturb the normal message flow). 
</para></listitem> 
<listitem> <para>
When the Monitoring Server receives events from the Agent, it optionally uses filters and/or handlers on those events and stores them into a database.
</para></listitem>
</orderedlist>
<para>The Agent and Monitoring Service are made available as follows:</para>
<itemizedlist> 
<listitem><para>
The Agent is packaged as a JAR that needs to be on the classpath of the service consumer and provider. </para></listitem> 
<listitem> <para> 
The Monitoring Server is deployed as a WAR in a servlet container and needs access to a database. </para></listitem> 
</itemizedlist>
			</para>
			<section>
			<title>Messages, Events and Flow IDs</title>
    <mediaobject>
	  <imageobject>
		 <imagedata fileref="images/GeneratedEvents.jpg" format="jpg"/>
	  </imageobject>
	</mediaobject>  			<para>
One service call can generate four events:
For example: A consumer is sending a request (REQ_OUT), the service receives request (REQ_IN), 
the service sends response (RESP_OUT) and the consumer receives response (RESP_IN). </para>
<para> An Agent can be configured to collect all four events in this service call, on both the consumer and provider side. 
For further event processing all of these events will get the same "flow id". This described in more 
detail in <xref linkend="SAM_arch" />.
			</para>


</section>
			<section>
			<title>Structure of this manual</title>
			<para>
			In <xref linkend="SAM_arch" />, we overview the architecture of how an Agent and Monitoring Server interact.
			</para>
			<para>
			In <xref linkend="SAM_install" />, we look at installing an Agent and Monitoring Server into a customer application.
			</para><para>
			In <xref linkend="SAM_configure" />, we look at configuration files and values for Agents and Monitoring Servers.
			</para><para>
			In <xref linkend="SAM_run_test" />, we look at running and testing the system.
 			</para>
 			</section>
	</chapter>
	<chapter xml:id="SAM_arch">
	<title>Architecture</title>
		<para>
On the left of the below diagram the Agent is described, on the right the Monitoring Server. The Agent is used to collect all message data from both the service and client and sends this data to the Monitoring Server. The Monitoring Server will receive events and store them into the database. A web service is used as the interface between the Agent and the Monitoring Server.		
		</para>
	<mediaobject>
	  <imageobject>
		 <imagedata fileref="images/architecture.jpg" format="jpg" scale="95"/>
	  </imageobject>
	</mediaobject>  
		<para>
The FlowId Producer is a component used to generate the FlowId (a UUID) for the Message Header and pass it to subsequent messages.

For each message exchange, the flow id is created if there is no flow id present. So, for the first client the flow id 
is created for each service call. When you have an intermediary this receives a service call, but also calls other services; then the flow id 
is carried from the incoming call to all calls that follow this call. Then on the server side the flow id is taken from the request and also 
set on the response.
</para>
		<para>
Filters or handlers can be set up on both the Agent side and Monitoring Server side, and can subsequently be used to filter events and manipulate the event's content. There are some built-in filters and handlers (eg. StringContentFilter, PasswordHandler) and you can develop your own filters and handlers by extending the EventFilter or EventHandler Service Provider Interface (SPI).
		</para>
	<para>
For the structure of information on events, please see <xref linkend="SAM_event_structure" />.
	</para>
	</chapter>
    <chapter xml:id="SAM_install">
        <title>Installation</title>
		<para>
		The SAM installation includes Agent side installation and Monitoring Server side installation. 
		Examples are available (sam-example-service, sam-example-service2) for you to install an Agent onto them.
		</para>
		<section>
		<title>Agent Installation</title>
		<para>
The Agent needs to be deployed with the customer application. The best way to install the agent is to add it to the classpath using a Maven dependency
		</para>
	<mediaobject>
	  <imageobject>
		 <imagedata fileref="images/Deployment.jpg" format="jpg"/>
	  </imageobject>
	</mediaobject>  
		<para>
<programlisting>
&lt;dependency>
    &lt;groupId>org.talend.esb&lt;/groupId>
    &lt;artifactId>sam-agent&lt;/artifactId>
    &lt;version>{talend esb version}&lt;/version>
&lt;/dependency>
</programlisting>

		</para>
		<para>
With Spring, the Agent has to be added to the Spring context:
<para>
<code>&lt;import resource="classpath:agent-context.xml" /&gt;</code>
</para>
		</para>
		<para>
For Spring-related services add the feature to the service; open the application context configuration and add the feature in the following manner:
<programlisting>
&lt;jaxws:endpoint 
    id="customerService" address="/CustomerServicePort" 
    implementor="com.example.customerservice.server.CustomerServiceImpl"&gt; 
    &lt;jaxws:features>
        &lt;ref bean="eventFeature"/&gt;
    &lt;/jaxws:features&gt;
&lt;/jaxws:endpoint&gt;
</programlisting>
		</para>
		</section>
		
		<section>
		<title>Monitoring Server Installation</title>
		<para>
The monitoring server can be deployed into any servlet container.  For example, it can be deployed into Tomcat: $TOMCAT_HOME/webapps/sam-server-war. The Monitoring Server needs a database to store event data, so make sure a RDBMS has been installed/accessed, you can find how to configure the database in <xref linkend="SAM_configure" />.
		</para>
		<para>
The sam-server-war also can be run with <userinput>mvn jetty:run</userinput> which runs on an embedded Jetty server. If the Apache Derby database has been configured on Monitoring Server side, RDBMS installation will be skipped.	
		</para>
		</section>
		
		<section>
		<title>Example Installation</title>
		<para>
sam-example-service.war and sam-example-service2.war provided as a whole customer application with sam-agent running. They can be deployed into any J2EE Web container. For example, they can be deployed into Tomcat: $TOMCAT_HOME/webapps/.
		</para>
		</section>
	</chapter>
	
	<chapter xml:id="SAM_configure">
	<title>Configuration</title>
	<section xml:id="SAM_agent_configure">
	<title>Agent Configuration</title>
	<para>
The main configuration files for Agents are agent.properties and filter, handler configuration files. 
agent.properties can be created by you and put it into own Application's classpath. Filter and handlers are based on 
Spring bean configuration and you can add them into your own Application context (for example, beans.xml).
	</para>
	<para>Possible values in
<emphasis role="strong">agent.properties</emphasis>:
    </para>
        <informaltable>
          <tgroup cols="3">
            <colspec colnum="1" colwidth="30*"/>
            <colspec colnum="2" colwidth="20*"/>
            <colspec colnum="3" colwidth="50*"/>
            <thead>
              <row>
                <entry>
                  <para>Property</para>
                </entry>

                <entry>
                  <para>Default</para>
                </entry>
				
                <entry>
                  <para>Description</para>
                </entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>collector.scheduler.interval</entry>
                <entry></entry>
				<entry>Interval for scheduler. Start every X milliseconds sent events to Monitoring Server</entry>
              </row>
              <row>
                <entry>collector.maxEventsPerCall</entry>
                <entry></entry>
				<entry>Number of events within one service call. This is a maximum number. If there are events in the queue, the events will be processed.</entry>
              </row>
              <row>
                <entry>log.messageContent</entry>
                <entry>true</entry>
				<entry>Enable message content logging for event producer.</entry>
              </row>
              <row>
                <entry>log.maxContentLength</entry>
                <entry>-1</entry>
				<entry>Maximum content length of event. -1 is unlimited.</entry>
              </row>
              <row>
                <entry>service.url</entry>
                <entry></entry>
				<entry>Configure url to Monitoring Server</entry>
              </row>
              <row>
                <entry>service.retry.number</entry>
                <entry>5</entry>
				<entry>Number of retries to access Monitoring Server</entry>
              </row>
              <row>
                <entry>service.retry.delay</entry>
                <entry>1000</entry>
				<entry>Delay in milliseconds between the next attempt to send events to Monitoring Server</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>	
	<para>
For example:
<programlisting>
collector.scheduler.interval=60000
collector.maxEventsPerCall=200
log.messageContent=true

service.url=http://localhost:8080/sam-server-war/services/MonitoringServiceSOAP
service.retry.number=3
service.retry.delay=5000
</programlisting>
	</para>
	<para>
To filter or manipulate events you can add pre-defined or your own filters and handlers to the Agent. Put the filter or handler beans into any Spring configuration file. Some example bean definitions can be found below: 

<para>Example 1: filters out all messages that contain "contractor" in the body:</para>

<programlisting>
&lt;bean id="stringContentFilter" 
        class="org.talend.esb.sam.common.filter.impl.StringContentFilter"&gt;
	&lt;property name="wordsToFilter"&gt;
		&lt;list&gt;
			&lt;value>contractor&lt;/value&gt;
		&lt;/list&gt;
	&lt;/property&gt;
&lt;/bean&gt;
</programlisting>

<para>Example 2: the Passwordhandler replaces &lt;Password> tags with &lt;Replaced>: </para> 
<programlisting>
&lt;bean id="passwordHandler" 
        class="org.talend.esb.sam.common.handler.impl.PasswordHandler"&gt;
	&lt;property name="tagnames"&gt;
		&lt;list&gt;
			&lt;value>Password&lt;/value&gt;
		&lt;/list&gt;
	&lt;/property&gt;
&lt;/bean&gt;
</programlisting>
	</para>
	</section>
	
	<section>
	<title>Monitoring Server Configuration</title>
	<para>
The main configuration files for Monitoring Server are logserver.properties and filter, handler configuration files. 
    </para>
	<para>
	Possible values in <emphasis role="strong">logserver.properties</emphasis>:

    </para>
        <informaltable>
          <tgroup cols="3">
            <colspec colnum="1" colwidth="30*"/>
            <colspec colnum="2" colwidth="20*"/>
            <colspec colnum="3" colwidth="50*"/>
            <thead>
              <row>
                <entry>
                  <para>Property</para>
                </entry>

                <entry>
                  <para>Default</para>
                </entry>
				
                <entry>
                  <para>Description</para>
                </entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>monitoringServiceUrl</entry>
                <entry></entry>
				<entry>The address url published by Monitoring Server</entry>
              </row>
              <row>
                <entry>db.driver</entry>
                <entry></entry>
				<entry>Database Driver class name</entry>
              </row>
              <row>
                <entry>db.url</entry>
                <entry></entry>
				<entry>URL used to access Database</entry>
              </row>
              <row>
                <entry>db.username</entry>
                <entry></entry>
				<entry>User name which authenticated by Database</entry>
              </row>
              <row>
                <entry>db.password</entry>
                <entry></entry>
				<entry>Password which authenticated by Database</entry>
              </row>
              <row>
                <entry>db.incrementer</entry>
                <entry></entry>
				<entry>ID Incrementer or sequence generator used to generator unique event ID</entry>
              </row>
              <row>
                <entry>db.recreate</entry>
                <entry>false</entry>
				<entry>Whether re-create tables in Database</entry>
              </row>
              <row>
                <entry>db.createsql</entry>
                <entry></entry>
				<entry>SQL file name which used to create tables in Database</entry>
              </row>			  
            </tbody>
          </tgroup>
        </informaltable>		
	<para>
logserver.properties example (for Apache Derby):
	</para>
<programlisting>
monitoringServiceUrl=/MonitoringServiceSOAP
db.driver=org.apache.derby.jdbc.ClientDriver
db.url=jdbc:derby://localhost:1527/db;create=true
db.username=test
db.password=test
db.incrementer=derbyIncrementer

db.recreate=true
db.createsql=create.sql
</programlisting>
	<para>
logserver.properties example (for Mysql):
	</para>
<programlisting>
monitoringServiceUrl=/MonitoringServiceSOAP

db.driver=com.mysql.jdbc.Driver
db.url=jdbc:mysql://localhost:3306/test
db.username=test
db.password=test
db.incrementer=mysqlIncrementer

db.recreate=false
db.createsql=create_mysql.sql
</programlisting>

	<para>
For filter, handler configuration, please refer to <xref linkend="SAM_agent_configure" />.	
	</para>
	</section>

	</chapter>
	
	<chapter xml:id="SAM_run_test">
	<title>Running and Testing</title>
	<section>
	<title>Pre-requisites</title>
	<para>
	This section shows you how to run the sample tests (sam-example-service, sam-example-service2). First, please check the following:
	<itemizedlist>
	<listitem>
     your database is running and accessible.	
	</listitem>
	<listitem>
    sam-server-war.war, sam-example-service.war, sam-example-service2.war deployed into your J2EE container.	
	</listitem>
	<listitem>
    agent.properties, logserver.properties are configured correctly.	
	</listitem>
	</itemizedlist>
	</para>
	</section>
	<section>
	<title>General Test</title>
	<para>
Start SoapUI tool, send SOAP message below to sam-example-service2 endpoint, for example like this: <code>http://localhost:8080/sam-example-service2/services/CustomerServicePort</code>
<programlisting>
&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
        xmlns:cus="http://customerservice.example.com/"&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;cus:getCustomersByName&gt;
         &lt;name>jacky&lt;/name&gt;
      &lt;/cus:getCustomersByName&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;

</programlisting>
	</para>
	<mediaobject>
	  <imageobject>
		 <imagedata fileref="images/soap1.jpg" format="jpg" scale="95"/>
	  </imageobject>
	</mediaobject>  
	</section>
	
	<section>
	<title>Filters and Handlers Test</title>
	<para>This test consists of three steps:</para>
	<procedure>
	<step>
	<para>Add a PasswordHandler to your Application Service/Client</para>
	<para>
PasswordHandler is a pre-defined handler used to replace the real password characters with null('') for security considerations. You can set the tag name which has the password and need to be replaced. For example:
<programlisting>
&lt;bean id="passwordFilter" 
      class="org.talend.esb.sam.common.handler.impl.PasswordHandler"&gt;
   &lt;property name="tagnames"&gt;
      &lt;list&gt;
         &lt;value&gt;Password&lt;/value&gt;
      &lt;/list&gt;
   &lt;/property&gt;
&lt;/bean&gt;
</programlisting>
	</para>
	<para>
Then, send a Message which has the &lt;Password> tag:
<programlisting>
&lt;soapenv:Header>
   &lt;wsse:Security 
      xmlns:wsse="http://docs.oasisopen.org/wss/2004/01/oasis-200401-wss-ws
security-secext-1.0.xsd" soapenv:mustUnderstand="0">

   &lt;wsse:UsernameToken>
      &lt;wsse:Username>user1&lt;/wsse:Username>
      &lt;wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-2004
01-wss-usernametoken-profile-1.0#PasswordDigest">
      IR55epSSTb7sg3Z3+HKNb9MqAWg=&lt;/wsse:Password>
   &lt;/wsse:UsernameToken>

   &lt;/wsse:Security>
&lt;/soapenv:Header>   
</programlisting>	
	</para>
	<para>
The value of &lt;Password> Element will be replaced with ''.
<programlisting>
&lt;soapenv:Header>
   &lt;wsse:Security 
      xmlns:wsse="http://docs.oasisopen.org/wss/2004/01/oasis-200401-wss-ws
security-secext-1.0.xsd" soapenv:mustUnderstand="0">

   &lt;wsse:UsernameToken>
      &lt;wsse:Username>user1&lt;/wsse:Username>
      &lt;replaced xmlns=""/>
   &lt;/wsse:UsernameToken>

   &lt;/wsse:Security>
&lt;/soapenv:Header>
</programlisting>   
	</para>
	</step>
	
	<step>
	<para>Next, add a CustomInfoHandler to your application service or client. 
CustomInfoHandler is a pre-defined handler used to store user-defined key/value in the database. For example:
<programlisting>
&lt;bean id="fixedProperties" 
      class="org.talend.esb.sam.common.handler.impl.CustomInfoHandler">
   &lt;property name="customInfo">
      &lt;map>
         &lt;entry key="Application name" value="Dummy App"/>
         &lt;entry key="Stage" value="Dev"/>
      &lt;/map>
   &lt;/property>	
&lt;/bean>    
</programlisting>
	</para>
	<para>
Then send a message, and the custom key/value properties will be stored in the database.
	</para>
	<mediaobject>
	  <imageobject>
		 <imagedata fileref="images/customprop.jpg" format="jpg"/>
	  </imageobject>
	</mediaobject>  
	</step>
	<step>
	<para>Finally, add a filter configuration on the Monitoring Server side</para>
	<para>
Modify server.xml on the Monitoring Server. For example:
<programlisting>
......
&lt;bean id="monitoringService" 
      class="org.talend.esb.sam.server.service.MonitoringServiceImpl">
   &lt;property name="eventFilter">
      &lt;list>
         &lt;ref local="stringContentFilter" />
      &lt;/list>
      &lt;/property>
         &lt;property name="eventManipulator">
         &lt;list>
            &lt;ref local="contentLengthHandler" />
         &lt;/list>
      &lt;/property>
   &lt;property name="persistenceHandler" ref="eventRepository" />    
&lt;/bean>
......
</programlisting>
    </para>
	</step>
	<step>
	The information should now be stored in the database.
	</step>
	</procedure>
	</section>
	<section>
	<title>Monitoring Events from Database</title>
	<para>
If the events have been stored into a database successfully, you can query them from the database. For example:
	</para>
	<mediaobject>
	  <imageobject>
		 <imagedata fileref="images/db.jpg" format="jpg" scale="60"/>
	  </imageobject>
	</mediaobject> 
	</section> 	
	</chapter>
	
<appendix xml:id="SAM_event_structure">
<title>Event Structure</title>
<para>This is the information stored in the Monitoring Server database on a particular event:</para>
        <informaltable>
          <tgroup cols="3">
            <colspec colnum="1" colwidth="30*"/>
            <colspec colnum="2" colwidth="20*"/>
            <colspec colnum="3" colwidth="50*"/>
            
            <thead>
              <row>
                <entry>
                  <para>Field</para>
                </entry>

                <entry>
                  <para>Type</para>
                </entry>
				
                <entry>
                  <para>Description</para>
                </entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>ID</entry>
                <entry>bigint(20)</entry>
				<entry>Stores the persistence id after commit</entry>
              </row>
              <row>
                <entry>MESSAGE_CONTENT</entry>
                <entry>longtext</entry>
				<entry>String with the SOAP message content which come from Service endpoint or client</entry>
              </row>
              <row>
                <entry>EI_TIMESTAMP</entry>
                <entry>datetime</entry>
				<entry>Timestamp from the event creation</entry>
              </row>
              <row>
                <entry>EI_EVENT_TYPE</entry>
                <entry>varchar(255)</entry>
				<entry>EventType is an enumeration. Values: REQ_IN; REQ_OUT; RESP_IN; RESP_OUT; FAULT_IN; FAULT_OUT</entry>
              </row>
              <row>
                <entry>ORIG_CUSTOM_ID</entry>
                <entry>varchar(255)</entry>
				<entry>Custom id is an empty field. It is not used by Agents currently</entry>
              </row>
              <row>
                <entry>ORIG_PROCESS_ID</entry>
                <entry>varchar(255)</entry>
				<entry>Process id is the OS process id</entry>
              </row>
              <row>
                <entry>ORIG_HOSTNAME</entry>
                <entry>varchar(128)</entry>
				<entry>Hostname of the event creator</entry>
              </row>
              <row>
                <entry>ORIG_IP</entry>
                <entry>varchar(64)</entry>
				<entry>IP address of the event creator</entry>
              </row>
              <row>
                <entry>MI_PORT_TYPE</entry>
                <entry>varchar(255)</entry>
				<entry>Service port type of event creator</entry>
              </row>
              <row>
                <entry>MI_OPERATION_NAME</entry>
                <entry>varchar(255)</entry>
				<entry>Service operation name of event creator</entry>
              </row>
              <row>
                <entry>MI_MESSAGE_ID</entry>
                <entry>varchar(255)</entry>
				<entry>Unique id for one message. (UUID)</entry>
              </row>			  
              <row>
                <entry>MI_FLOW_ID</entry>
                <entry>varchar(64)</entry>
				<entry>Unique id for the message flow. (UUID) All events with the same id belong together</entry>
              </row>	
              <row>
                <entry>MI_TRANSPORT_TYPE</entry>
                <entry>varchar(255)</entry>
				<entry>Transport type of event creator</entry>
              </row>	
              <row>
                <entry>ORIG_PRINCIPAL</entry>
                <entry>varchar(255)</entry>
				<entry>Principal info in the message header</entry>
              </row>	
              <row>
                <entry>CONTENT_CUT</entry>
                <entry>tinyint(1)</entry>
				<entry>Flag if event has been cut from the Agent</entry>
              </row>				  
            </tbody>
          </tgroup>
        </informaltable>

	</appendix>
	<appendix>
	<title>EVENTS_CUSTOMINFO Structure</title>

        <informaltable>
          <tgroup cols="3">
            <colspec colnum="1" colwidth="30*"/>
            <colspec colnum="2" colwidth="20*"/>
            <colspec colnum="3" colwidth="50*"/>
            <thead>
              <row>
                <entry>
                  <para>Field</para>
                </entry>

                <entry>
                  <para>Type</para>
                </entry>
				
                <entry>
                  <para>Description</para>
                </entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>ID</entry>
                <entry>bigint(20)</entry>
				<entry>Stores the unique persistence id of EVENTS_CUSTOMINFO</entry>
              </row>
              <row>
                <entry>EVENT_ID</entry>
                <entry>bigint(20)</entry>
				<entry>Stores the relative EVENT's ID value</entry>
              </row>
              <row>
                <entry>CUST_KEY</entry>
                <entry>varchar(255)</entry>
				<entry>custom property's key, e.g. Application name</entry>
              </row>
              <row>
                <entry>CUST_VALUE</entry>
                <entry>varchar(255)</entry>
				<entry>custom property's value, e.g. Dummy App</entry>
              </row>			  
            </tbody>
          </tgroup>
        </informaltable>

	</appendix>	
</book>
